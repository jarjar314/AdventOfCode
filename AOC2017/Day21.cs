using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Linq;
using System.Text;

namespace AOC2017
{
    public class Day21
    {

        public static void Main()
        {
            var input = @"../.. => .../.../###
#./.. => .../.#./.##
##/.. => .#./.#./...
.#/#. => ###/..#/.##
##/#. => ..#/###/#..
##/## => ..#/#../##.
.../.../... => .##./##../..##/.##.
#../.../... => ##../.#.#/..#./###.
.#./.../... => ##.#/#.#./.#../..##
##./.../... => ...#/##.#/.#.#/#.##
#.#/.../... => ..#./#.../###./...#
###/.../... => #.#./...#/#.#./###.
.#./#../... => ...#/###./.##./...#
##./#../... => ###./####/###./..##
..#/#../... => ####/#.../####/#.##
#.#/#../... => #.##/.#.#/##.#/###.
.##/#../... => ..../.#../.#.#/.##.
###/#../... => ..##/##.#/..##/.###
.../.#./... => ###./..##/.#../#..#
#../.#./... => ###./.#../#.../#...
.#./.#./... => ####/..#./.##./##..
##./.#./... => .#../#.#./###./###.
#.#/.#./... => ####/.##./##.#/.###
###/.#./... => #.#./..##/.##./#...
.#./##./... => ####/#.##/####/..#.
##./##./... => #.../.#../..../#.##
..#/##./... => #..#/..##/#.../####
#.#/##./... => ###./##../..##/#...
.##/##./... => ..../#.##/.###/#.#.
###/##./... => .#../##.#/.#../##..
.../#.#/... => ...#/.###/.##./###.
#../#.#/... => ###./##../#.#./.##.
.#./#.#/... => ..#./.#../.##./.###
##./#.#/... => #.../#.../.##./.#..
#.#/#.#/... => .##./..##/.###/#...
###/#.#/... => ..../####/###./....
.../###/... => #.##/.#.#/#.##/...#
#../###/... => #.../#.#./.#../#...
.#./###/... => ...#/###./.##./.#.#
##./###/... => ##../####/###./#.##
#.#/###/... => ...#/###./##.#/.#.#
###/###/... => #.#./##.#/..../.##.
..#/.../#.. => ...#/..#./..#./##..
#.#/.../#.. => ..#./#.##/#.#./#.##
.##/.../#.. => ####/####/#.##/#...
###/.../#.. => ###./..#./###./.#..
.##/#../#.. => ...#/####/..../###.
###/#../#.. => ##.#/.#../##.#/...#
..#/.#./#.. => ###./#.##/...#/##..
#.#/.#./#.. => #.../..#./..#./#.##
.##/.#./#.. => ##.#/...#/#.#./.###
###/.#./#.. => .#../..##/#.#./..#.
.##/##./#.. => #.../#.#./.###/#...
###/##./#.. => .##./.#../.#.#/.###
#../..#/#.. => ###./#..#/#.../##.#
.#./..#/#.. => #.#./#..#/#.../.###
##./..#/#.. => ...#/..##/..#./####
#.#/..#/#.. => ####/#..#/###./#.#.
.##/..#/#.. => ..#./..#./..../.##.
###/..#/#.. => ...#/#..#/#.#./....
#../#.#/#.. => ..##/.#.#/.###/.##.
.#./#.#/#.. => ..../##.#/..##/#..#
##./#.#/#.. => ..#./..##/#..#/#..#
..#/#.#/#.. => ..#./#.../#.#./##..
#.#/#.#/#.. => ##.#/..##/.###/...#
.##/#.#/#.. => #.##/.##./##../#.#.
###/#.#/#.. => ####/##.#/#..#/#.#.
#../.##/#.. => ..##/#.#./####/####
.#./.##/#.. => ##../###./####/....
##./.##/#.. => .###/####/..#./...#
#.#/.##/#.. => ###./##../##../#.##
.##/.##/#.. => ##../.###/####/.#.#
###/.##/#.. => ##../.##./#.../..#.
#../###/#.. => #.#./.#.#/#.../....
.#./###/#.. => .##./##../...#/##..
##./###/#.. => #.#./..../.##./##.#
..#/###/#.. => ...#/...#/##.#/...#
#.#/###/#.. => .##./.###/#..#/.##.
.##/###/#.. => ####/..##/#.../####
###/###/#.. => ...#/####/..#./.###
.#./#.#/.#. => .##./#.##/.##./.###
##./#.#/.#. => ..##/.#../##.#/###.
#.#/#.#/.#. => .#../..../.#.#/#...
###/#.#/.#. => ###./..#./..../#.#.
.#./###/.#. => #..#/.#../#.../..##
##./###/.#. => .##./...#/.###/....
#.#/###/.#. => .###/###./#.#./.#.#
###/###/.#. => #.##/.#.#/#.#./.##.
#.#/..#/##. => .###/..../####/####
###/..#/##. => #.##/###./..##/.##.
.##/#.#/##. => ..../...#/#..#/..##
###/#.#/##. => #.##/.#../.#../....
#.#/.##/##. => ..##/..##/#.../#..#
###/.##/##. => ##.#/#.../#.##/..##
.##/###/##. => ...#/..#./##../#.##
###/###/##. => #.##/#..#/..#./...#
#.#/.../#.# => ##.#/.#../##.#/.##.
###/.../#.# => #.#./..##/.#.#/##.#
###/#../#.# => ..#./#.##/...#/.###
#.#/.#./#.# => .###/#.##/#..#/#.##
###/.#./#.# => ..../..#./###./..#.
###/##./#.# => .###/##../..##/####
#.#/#.#/#.# => #.#./####/.#../.##.
###/#.#/#.# => ####/..../..##/#...
#.#/###/#.# => #.../.##./#.../...#
###/###/#.# => .#.#/...#/..../..##
###/#.#/### => .#../#.##/#.##/.###
###/###/### => #.../.#.#/#..#/#.##";
            var sample = @"../.# => ##./#../...
.#./..#/### => #..#/..../..../#..#";
            part1(sample);
            part2(sample);
            part1(input);
            part2(input);

        }

        private static char[][] flipAlongV(char[][] input)
        {
            var n = input.Length;
            var output = Clone(input);
            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < n/2; j++)
                {
                    var t = output[i][j];
                    output[i][j] = output[i][^(j + 1)];
                    output[i][^(j+1)] = t;
                }
            }

            return output;
        }
        private static char[][] flipAlongH(char[][] input)
        {
            var n = input.Length;
            var output = Clone(input);
            for (int j = 0; j < n; j++)
            {
                for (int i = 0; i < n / 2; i++)
                {
                    var t = output[i][j];
                    output[i][j] = output[^(i+1)][j];
                    output[^(i+1)][j] = t;
                }
            }

            return output;
        }

        private static int Convert(char[][] input)
        {
            var res = 0;
            int n = input.Length;
            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    res = res * 2 + (input[i][j] == '#' ? 1 : 0);
                }
            }
            return res;
        }

        private static char[][] rotate(char[][] input)
        {
            var n = input.Length;
            char[][] output = Clone(input);
            for (int i = 0; i < n / 2; i++)
            {
                for (int j = i; j < n - i - 1; j++)
                {
                    char t = output[i][j];
                    output[i][j] = output[^(j+1)][i];
                    output[^(j+1)][i] = output[^(i+1)][^(j+1)];
                    output[^(i+1)][^(j+1)] = output[j][^(i+1)];
                    output[j][^(i+1)] = t;
                }
            }

            return output;
        }

        private static char[][] Clone(char[][] input)
        {
            int n = input.Length;
            var output = new char[n][];
            for (int i = 0; i < n; i++)
            {
                output[i] = new char[n];
                for (int j = 0; j < n; j++)
                {
                    output[i][j] = input[i][j];
                }
            }

            return output;
        }

        private static void part1(string input)
        {

            var start = new char[3][] { ".#.".ToCharArray(), "..#".ToCharArray(), "###".ToCharArray() };
            var inputs = input.Split(new char[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries).ToArray();
            
            for (int i = 0; i < inputs.Length; i++)
            {
                var line = inputs[i];
                var rule = line.Split(new char[] { '/', '=', '>', ' ' }, StringSplitOptions.RemoveEmptyEntries).ToArray();
                //if (rule.Length == 5) handle23(rule);
                //else if (rule.Length == 7) handle34(rule);
                //else throw new NotImplementedException("There is a problem !!!");
            }
        }
        private static void part2(string input)
        {

        }
    }
}
