using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Linq;
using System.Reflection.Metadata;
using System.Runtime.CompilerServices;
using System.Text;

namespace AOC2023
{
    public class Day21
    {

        public static void Main()
        {
            var input = @"...................................................................................................................................
...................#.....#.....#.#.............#.#......#.......................#......#.......#......#...#...#.##..........##.....
......#......#.....#....#........#...............#..........................#................#...........#...#......#.....#.##.#...
..#.........#......#........##..##.#............#.#.#.#...................##....#......#.#............#...........#................
.#...............#....###.#....#...........#........##..............................#...............##.............#....#..........
............#.............##..#.#.....#..........#...#....................###...#.......#...........#.......##.#.........#.........
.................#..........#..#..#.....##..#........#..........#............#...##.#..............#.....#.........#....#..#.......
...#.......#..........#..#......###............#...#.#......................#.....#........###.#.............#..#....#..........#..
.................#...#........................................................#.#..................##...#.#.#....#...##..........#.
....#..........#...##...#...........#...........#................................#..#.............#.#...........#....#........#....
.....#....##...#........#......#.#..............#..........#......#..............#.......#...................#.......#...##..#...#.
......#...#.#....#...............#............#.....................#................#...###.#...#..........#.##...#...............
.....##..#............#..#.........#..#....#...............#..............................#.#.......................#............#.
.........##.....#.....#.........#.....#....#...............#.##.#....................#........................#..#..#...........#..
......#.##.............#......#.##.............................#......#..#..........#....#.#.......#...#.#...#.......#.#........#..
...................#..........#...........#.................#......#.......#..................#.....#...........#.#...#............
.....#.........##........#.........#.#.#.##..............#....#..........##.............###.##.....#......##.##.#...............#..
.#..#.....#...#..#......#..........................................#..........................#.....#......#.......................
.....#.#....#..........#............#.....##.................#................................#.##..#...........#............#.....
............#.......#...#.#......#.............................#...............................#..........#................#.....#.
.......#.....##..........##.#.........#...............................#......#.#..........................#......#......##.....#...
......#.#.......#..#..#..#............................##.#....##..........#...............#.......#.............##.....##..........
................#..#.........#.....#...........#...##.#.....#.......#......#...............#..#......##........#...#.#.............
.#............#..#.#.#....#....#.............................#.........#...........#................#....#...#....#...#.#...#......
.................#......#......##..............#.........#........#.........#...#....#............#.#..#...................#..##...
........#..........#..........................##..#....#...............................................#......#...........##..#....
........#.#.#..........#...#....................#....#..#....#.........#...#..#.................#......#..##......#..........#.....
...............#..................#.................................#..#....#..#..#...................#.......#............#.......
.#.#..............#......#.............................................#..............##....................#...........#......#.#.
.#.........#.....#............#...............#...........#.......#......#........................#...#..................#.........
......#.........#....#.....................#.#..................#....#....#.....###..#.#.............#..#..........................
...#....#................................#.....#.#...........#.................#.................................#.......#.....#.#.
...#...#..##...........#..............#....................#.........#.#....#....##..................#....#...#....................
......#..........#........#...........................##........#.#.....#.....#.......#...............#.......#....................
.......#..........##..#.#..........................#.#........#.#...........#...........#....#.........#..................#.#......
....................#....................#.........#...#......#.......#.......##...................................................
..........#............#..........#........#...........#......................#..........................##.#..#.........#...#.....
......#.....#.....................#.##.........#...#............#.#...........#...#.#............#.........##......#..........#....
.....#..........#.....#..............#.......#..##...........#.............#..#....#...#.......................##...........##...#.
.#..........#...#....................#...#......#..#.................#........#..........#...#...#..#.........#.........#....#.....
......#......#.....................#.......#.....#.........................##............#.#..##.................#...#...###.......
.......#.......#...................#..........#...#.....#......................#......##.....#.................#.............#.....
......#.....#..#..................#............................#....#.#..#..##.....................................................
.....#..#....#..#.#...............#......#.............#..#...........#.....#....#..#......#.#.....................##.#............
....#.......#..#.........#........#....#.#..................##......#..........#........................#.............#.....#......
.#.....#......#........................#..#..............................#..........#.......#.......##...#...........#.............
...........................#.........#....##.....#.#....#...###...######...#.#......#...............#..........................##..
..#......#................#.#......#.#.............#..#......#....#..#..#..#.........................##.........................#..
...#........#.........#.##..............................##.#....#.......#.......#.......................#.#.#...............#....#.
.......#..#.......................#..............#..........................#.#.....#.....#............#..............#..#.#.....#.
..#.........................##......................#.........#.#.#.#........#.................#.....#..#.#........................
..................#.......#.................#.#...................#.......#.#...........#......##...........................#......
.......................#.#.....##...#.#.....#...#...#.##...#.............#.....................##.##...............................
..#...............#.....#......#.....###.......................#............#.............#.#.....#.#.#............................
.......#...................#......#...#....................#.#...............#..........................#..#................#..#...
...........................#..........##..#..........#................................#..##..#.......##....#....#...........#......
...##.............#...##.....#.......#...............#.....###..#.........#.............#....#........#...#.....#.#................
.#...................#...##...........#............##........................#....#....#.....#........#......#...................#.
..............#.#..........#................................#...........#..#..............##..##...#.......#.......#..#..........#.
...............#........#........#..............#....#.........#.......#..........#.......#.#............#......#.#...#.........#..
.........#.......###...#.#...#..................#..#.......#...##...#.....##............#..#.......#...............................
............#......#.......................#..........#...#........#.#.......#....................#......#......#....#....#........
.........##.....#.......................................#...........#........................#.........#...........................
..........##.........#.....#.......#.................##..#.#......##...............#....#...#..#..#...##..#.##.#.....#.#.#.........
.......................#..............#......##.#.#.#...................##....##........#....#.....................#...............
.................................................................S.................................................................
.....#............#................#..###............#..##....#.#......#...........#..........#...#................................
...........#.......#...#.........#....#........#..#................#.........#.#......................#....#....#.........#.#......
................#..#........................#..#................#......#..#.......#...........##...#...............#...............
............#....#...#.....#.##.............#.#..............#.#...#........#...........#..#...##.........................#........
.#.........##.#..#...#.....#.#....##.#.#.....#.................#...#.........................#............#.#.#....#...............
.#...........#.#..........#......................#...#......##............#....................#......##.......#........#..........
..#......................#.#.............#..#.........................#........##.#.#...#..#.#...................#.................
.........................................#.#...#.#............#.............#...........#.#..#.#.#.......#.#.....#..#..............
....#........................#........#...#...........#..#..................##.#.#...........#....#.#......#...................#.#.
......#..........#.......##....#..........#.....#.............#.#......#..........#....#...........#.......#.......#...........#...
...#............#........#..#...........#........#..###.....#..#..........#...........#.........#.........#...##.###............##.
.......#........#....#.#.#.........#..#...............#..#........#.......#.................#.......#...#........#..............#..
.......................#............#.....#......#............#....#.....#.#..#..........#.......#...#........#..........#.........
...#..............#...................#.....#.........#....#.........#.......#.#.............##........#....#...#..................
..........#..........#......#.............#....................#..#.......#.#.#....##...#.#................................#.......
..#...........................#.......................................#....#..........#....................#................#....#.
......................#.#...............#.......#.........#....##.................#......#..........#....................##......#.
.........#...#............#...............##.....#......#..#........#.....#...#............#....................................#..
......##..#.#...........#..#...........###.....#........................##.....................#........#..........................
............#...............#....#..#..............#.................#......#.#..#..........#..................................#...
.............#.##...................................#.........##...#.....................................#.................#.#...#.
.#...........................#............#............#.####..........................#.#...#.#.....#...........#.................
.....#...........#.#.................#....#....#....##.#.....#.....#...#............##...#.#....................#.#.#..#..#..#.....
........#.#..#..#...........#.........#..#.....#.##.#........#......................#........#.....##...........#......#...........
............#..#................#......#.#.#............#...#...........#....#..#..............................................#.#.
......#...#............................................................#...#................#.##............#.....#....#.......#...
..#..........#...#.....................#............#........#.......#.##....#...#.............#........................##......#..
..#....#.#..........................#.#......#.......#..........#......#..........#......#.....#...............#.##.....#...#......
.................#......##........#....................#..#.......#........#.......#.#.....................#...................#...
....####..............##...........#.........#....#......#.....................#.#...#.....#.#...............#.#...................
......#.....#.............................#.........#..#..#.....#.#............##......##..#............#..#....#......#...#...###.
.#........#............#...#..............#..............##....#......#...#.#.#.........#..#.#........#...........#...##....#......
.......#......#..#.....#.....................#....#..#..............#...............#....................#....#...##..#.......#.##.
........#.........#....###...#...........#..........#..........#....#....#...........#......#...........#...#..........#.......#...
....#...........#.......#...##.........#...#...#...#......#..............#......................................#.......##....##...
.....##..#..........#..#...#.................##.........................#..#............................#......#.#..............#..
.#.#.##...............#.........#...............................#..#....##.#......#...#..#.............#................#..........
.....................#....#.....#............#..#.#.....#...........#......#..........................#................###...#.....
.#.......#..#.....................##..........#.............................##......#.................#...............#.....#.##...
..#..............#...#.#........................#..#..................##.......#..............##.#..................##.............
............#..........#.................................................#......#..#.#.........#...#....................#....#.....
.......#.................#.....................#.....#..##....................#.........................#........#...#....#.##.....
.#..............###.....#.........#...................#....#............#..#.................#......##....##.#.#.........#.........
..................#.#.................................#.......##..#..#.#..#.#.#.........................#...#..........#...#.......
.......##...#...##...#.............................................#...#.........................#..........##.....###...#.....#...
.......#........#..#...#....#..........#.#........#........#......#..#...................#........#.#....##.#......#.#.........#...
..#....#..........#.#..#...........#.....................#..#...#.#...#..#..#..............#......#..#.......#..##..#..............
..........#.........#...##..........#...#..........................#.........................#.................#.....#.....#.....#.
............#......#..#...............#.....#..................#.......#....................#...#....#...#......#........#...#.....
.##........................#....##.#....................#.....#...........#...........#...#........#...#..........#..#......#......
...#....................#...............#...............................#....................................#....#.#..........#...
......................#.............##....#.............#....#..#.#.......#............##............#.#.##.........#......#...#...
..#..#..........#.##.........#......##...#......................#...................#.................#..................##........
.........#............##.#....#......#....##.#.#..........#.......#...#.............#........................#..........#..........
.....#..#............#..............#..#..............................#................#.....#...........................#.#.#.....
........#..#.##...#..#..##.#....#..........##.................##..#...............#.#....#..........#.........##..##...............
..........#..........#....#..#.............#.................#.....#..............#...........##......##...........................
.#....##...#...........#.................##....................................#..#..........................#...........#.........
.............................#............#..#......#...........................##..............#.#...#............#.......##.#....
....#...........#..##....##.#......##.....##........#..##.................#.........................#.......##.#.#...#...#.........
..........#...#............#....#....#..##.....#.........#........................#..............#.......................#.....#...
..#.....#....#...#..##.#..........#.#.....#...............#..............#.##..#...#..........#.....#.#.........##.##.....#......#.
......#....#.........#............#.....................##................#..#.............#..............#....#.............#.....
.......#...........#......#........#.............#...#......#................#.#.#........#.....#.#.#....#.######......#...........
...................................................................................................................................";
            var sample = @"...........
.....###.#.
.###.##..#.
..#.#...#..
....#.#....
.##..S####.
.##..#...#.
.......##..
.##.#.####.
.##..##.##.
...........";
            part1(sample);
            //part2Sample(sample, 6);
            //part2Sample(sample, 10);
            //part2Sample(sample, 50);
            //part2Sample(sample, 100);
            //part2Sample(sample, 500);
            //part2Sample(sample, 1000);
            //part2Sample(sample, 5000);
            part1(input);
            // looking for linear regression
            //for (int i = 1; i < 5000; i++)
            //{
            //    part2Sample(input, i);
            //}
            part2(input, 26501365);
            //part2_v1(input, 26501365);
        }
        private static int[] dx = new int[] { 0, 1, 0, -1, 0 };
        private static void part1(string input)
        {
            var inputs = input.Split("\r\n", StringSplitOptions.RemoveEmptyEntries).ToArray();
            long count = 0;
            int m = inputs.Length, m2 = m + 2;
            int n = inputs[0].Length, n2 = n + 2;
            var grid = new char[m + 2][];
            grid[0] = grid[m + 1] = new char[n2];
            int startR = 0, startC = 0;
            for (int c = 0; c < n2; c++)
            {
                grid[0][c] = '#';
                grid[m + 1][c] = '#';
            }
            for (int i = 0; i < m; i++)
            {
                var line = inputs[i];
                grid[i + 1] = new char[n2];
                grid[i + 1][0] = '#';
                grid[i + 1][n2 - 1] = '#';
                for (int j = 0; j < n; j++)
                {
                    grid[i + 1][j + 1] = inputs[i][j];
                    if (inputs[i][j] == 'S')
                    {
                        startR = i + 1;
                        startC = j + 1;
                    }
                }
            }
            var visited = new Dictionary<(int r, int c), int>();
            var q = new Queue<(int r, int c, int step)>();
            q.Enqueue((startR, startC, 0));
            visited.Add((startR, startC), 0);
            while (q.Count > 0)
            {
                var p = q.Dequeue();
                for (int i = 0; i < 4; i++)
                {
                    int dr = p.r + dx[i], dc = p.c + dx[i + 1];
                    if (visited.ContainsKey((dr, dc))) continue;
                    if (grid[dr][dc] == '#') continue;
                    visited[(dr, dc)] = p.step + 1;
                    q.Enqueue((dr, dc, p.step + 1));
                }
            }
            count = visited.Where(kvp => kvp.Value <= 64 && kvp.Value % 2 == 0).Count();

            Console.WriteLine($"1st star is {count}");
        }
        private static void part2_v1(string input, int maxStep)
        {
            var inputs = input.Split("\r\n", StringSplitOptions.RemoveEmptyEntries).ToArray();
            long count = 0;
            int m = inputs.Length;
            int n = inputs[0].Length;
            var grid = new char[m][];
            int startR = 0, startC = 0;
            for (int i = 0; i < m; i++)
            {
                var line = inputs[i];
                grid[i] = new char[n];
                for (int j = 0; j < n; j++)
                {
                    grid[i][j] = inputs[i][j];
                    if (inputs[i][j] == 'S')
                    {
                        startR = i;
                        startC = j;
                        grid[i][j] = '.';
                    }
                }
            }
            var center = CountWithin(maxStep, m, n, grid, startR, startC);
            var fromcentertop = CountWithin(maxStep, m, n, grid, 0, 65);
            var fromtopleft = CountWithin(maxStep, m, n, grid, 0, 0);
            var fromtopright = CountWithin(maxStep, m, n, grid, 0, 130);
            var fromcenterbottom = CountWithin(maxStep, m, n, grid, 130, 65);
            var frombottomleft = CountWithin(maxStep, m, n, grid, 130, 0);
            var frombottomright = CountWithin(maxStep, m, n, grid, 130, 130);
            var fromcenterleft = CountWithin(maxStep, m, n, grid, 65, 0);
            var fromcenterright = CountWithin(maxStep, m, n, grid, 65, 130);

            // each block is 131 by 131 centered with a total of full accessible in less than or equal of 260 steps.
            long full = center.Count;
            count = full; // the center piece
            // full block on the right // which, by symmetry is the same starting point on left, whether going up or down
            long fullblocks = (maxStep - 130) / 131 - 1; // maxstep -130 means we are on upper right corner. then every 131 we have a full block minus 1 to handle the border of maxSteps -1  to remove.
            count += 2 * fullblocks * full; // à droite et gauche du bloc central
            long block = fullblocks;
            while (66 + 131 * block <= maxStep) // pour atteindre le point de départ, il faut faire 66 + 131 * blocks traités
            {
                long remaining = maxStep - (66 + 131 * block); // ce que l'on peut encore faire comme steps. Il faut garder tout jusque remaining sauf remaining - 1.
                count += fromcenterright.Count(c => c.Value <= remaining) - fromcenterright.Count(c => c.Value == remaining - 1);
                count += fromcentertop.Count(c => c.Value <= remaining) - fromcentertop.Count(c => c.Value == remaining - 1);
                count += fromcenterleft.Count(c => c.Value <= remaining) - fromcenterleft.Count(c => c.Value == remaining - 1);
                count += fromcenterbottom.Count(c => c.Value <= remaining) - fromcenterbottom.Count(c => c.Value == remaining - 1);
                block++;
            }
            // now the cross and all starting point from center has been handled, let's see when we start from a corner.
            long row = 0;
            while (row * 131 + 66 <= maxStep)
            {
                // how many blocks full on the row
                fullblocks = Math.Max(0, (maxStep - 132 - row * 131) / 131 - 1);  // the upper right corner is reach in 132 (bottom left corner) + 260
                count += 4 * fullblocks * full;
                block = fullblocks;
                while (132 + row * 131 + block * 131 <= maxStep) // 132 to reach bottom left corner, 131 per row up, 131 per block right to reach starting point in the corner
                {
                    long remaining = maxStep - (132 + 131 * (row + block));
                    count += fromtopleft.Count(c => c.Value <= remaining) - fromtopleft.Count(c => c.Value == remaining - 1);
                    count += fromtopright.Count(c => c.Value <= remaining) - fromtopright.Count(c => c.Value == remaining - 1);
                    count += frombottomleft.Count(c => c.Value <= remaining) - frombottomleft.Count(c => c.Value == remaining - 1);
                    count += frombottomright.Count(c => c.Value <= remaining) - frombottomright.Count(c => c.Value == remaining - 1);
                    block++;

                }
                row++;
            }

            Console.WriteLine($"2nd star is {count} for {maxStep}");
        }
        private static void part2(string input, int maxStep)
        {
            var inputs = input.Split("\r\n", StringSplitOptions.RemoveEmptyEntries).ToArray();
            long count = 0;
            int m = inputs.Length;
            int n = inputs[0].Length;
            var grid = new char[m][];
            int startR = 0, startC = 0;
            for (int i = 0; i < m; i++)
            {
                var line = inputs[i];
                grid[i] = new char[n];
                for (int j = 0; j < n; j++)
                {
                    grid[i][j] = inputs[i][j];
                    if (inputs[i][j] == 'S')
                    {
                        startR = i;
                        startC = j;
                        grid[i][j] = '.';
                    }
                }
            }
            var center = Aggregate(CountWithin(maxStep, m, n, grid, startR, startC));
            var fromcentertop = Aggregate(CountWithin(maxStep, m, n, grid, 0, 65));
            var fromtopleft = Aggregate(CountWithin(maxStep, m, n, grid, 0, 0));
            var fromtopright = Aggregate(CountWithin(maxStep, m, n, grid, 0, 130));
            var fromcenterbottom = Aggregate(CountWithin(maxStep, m, n, grid, 130, 65));
            var frombottomleft = Aggregate(CountWithin(maxStep, m, n, grid, 130, 0));
            var frombottomright = Aggregate(CountWithin(maxStep, m, n, grid, 130, 130));
            var fromcenterleft = Aggregate(CountWithin(maxStep, m, n, grid, 65, 0));
            var fromcenterright = Aggregate(CountWithin(maxStep, m, n, grid, 65, 130));

            // each block is 131 by 131 centered with a total of full accessible in less than or equal of 260 steps.
            var fullEven = center[center.Keys.Max()].cumul;
            var fullOdd = center[center.Keys.Max() - 1].cumul;
            var full = fullEven + fullOdd; // the sum of two elements
            count = maxStep % 2 == 0 ? fullEven : fullOdd; // the center piece with even or odd depending on maxSteps.
            // full block on the right // which, by symmetry is the same starting point on left, whether going up or down
            long fullblocks = ((maxStep - 130) / 131 - 1)/2; // maxstep -130 means we are on upper right corner. then every 131 we have a full block minus 1 to handle the border of maxSteps -1  to remove.
            count += fullblocks * full * 4; // à droite et gauche, en haut et en bas. du bloc central we have an even number of blocks
            long block = fullblocks * 2; // because we have fullblock times 2 on each 
            while (66 + 131 * block <= maxStep) // pour atteindre le point de départ, il faut faire 66 + 131 * blocks traités
            {
                long remaining = maxStep - (66 + 131 * block); // ce que l'on peut encore faire comme steps. Il faut garder tout jusque remaining sauf remaining - 1.
                count += compte(fromcenterright, remaining); // compte is taking the parity needed.
                count += compte(fromcentertop, remaining);
                count += compte(fromcenterleft, remaining);
                count += compte(fromcenterbottom, remaining);
                block++;
            }
            // now the cross and all starting point from center has been handled, let's see when we start from a corner.
            int row = 0;
            while (row * 131 + 66 <= maxStep)
            {
                // how many blocks full on the row
                fullblocks = Math.Max(0, (maxStep - 132 - row * 131) / 131 - 1) / 2;  // the upper right corner is reach in 132 (bottom left corner) + 260
                count += 4 * fullblocks * full;
                block = fullblocks * 2;
                while (132 + row * 131 + block * 131 <= maxStep) // 132 to reach bottom left corner, 131 per row up, 131 per block right to reach starting point in the corner
                {
                    long remaining = maxStep - (132 + 131 * (row + block));
                    count += compte(fromtopleft, remaining);
                    count += compte(fromtopright, remaining);
                    count += compte(frombottomleft, remaining);
                    count += compte(frombottomright, remaining);
                    block++;
                }
                row++;
            }

            Console.WriteLine($"2nd star is {count} for {maxStep}");
        }

        private static long compte(Dictionary<long, (int exact, int cumul)> map, long remaining)
        {
            long count = 0;
            long max = map.Keys.Max();
            if (remaining > max)
            {
                // sum the same parity
                if (max % 2 == remaining % 2)
                    count += map[max].cumul;
                else
                    count += map[max - 1].cumul;
            }
            else if (map.TryGetValue(remaining, out var cum)) count += cum.cumul;

            return count;
        }

        private static Dictionary<long, (int exact, int cumul)> Aggregate(Dictionary<(int r, int c), int> distance)
        {
            var res = new Dictionary<long, (int exact, int cumul)>();
            foreach (var d in distance.Values.Distinct())
            {
                // exact + cumulative with same parity when going back...
                res[d] = (distance.Count(k => k.Value == d), distance.Count(k => k.Value <= d && (k.Value % 2) == (d % 2)));
            }
            return res;
        }
        private static Dictionary<(int r, int c), int> CountWithin(int maxStep, int m, int n, char[][] grid, int startR, int startC)
        {
            long count = 0;
            var visited = new Dictionary<(int r, int c), int>();
            var q = new Queue<(int r, int c, int step)>();
            q.Enqueue((startR, startC, 0));
            count++;
            visited.Add((startR, startC), 0);
            while (q.Count > 0)
            {
                var p = q.Dequeue();
                for (int i = 0; i < 4; i++)
                {
                    int dr = p.r + dx[i], dc = p.c + dx[i + 1], step = p.step + 1;
                    if (visited.ContainsKey((dr, dc))) continue;
                    if (dr < 0 || dr == m || dc < 0 || dc == n) continue;
                    if (grid[dr][dc] == '#') continue;
                    visited.Add((dr, dc), step);
                    if (step < maxStep)
                    {
                        q.Enqueue((dr, dc, step));
                    }
                    if (maxStep % 2 == 0)
                    {// only sum those accessible in even steps !
                        if (step % 2 == 0)
                            ++count;
                    }
                    else if (step != maxStep - 1)
                        count++;
                }
            }
            return visited;
        }

        private static void part2Sample(string input, int maxStep)
        {
            var inputs = input.Split("\r\n", StringSplitOptions.RemoveEmptyEntries).ToArray();
            long count = 0;
            int m = inputs.Length;
            int n = inputs[0].Length;
            var grid = new char[m][];
            int startR = 0, startC = 0;
            for (int i = 0; i < m; i++)
            {
                var line = inputs[i];
                grid[i] = new char[n];
                for (int j = 0; j < n; j++)
                {
                    grid[i][j] = inputs[i][j];
                    if (inputs[i][j] == 'S')
                    {
                        startR = i;
                        startC = j;
                    }
                }
            }
            var visited = new HashSet<(int r, int c)>();
            var q = new Queue<(int r, int c, int step)>();
            //var remove = new Queue<(int r, int c, int step)>();
            q.Enqueue((startR, startC, 0));
            //q.Enqueue((maxStep, maxStep, 0));
            count++;
            visited.Add((startR, startC));
            //remove.Enqueue((startR, startC, 0));
            while (q.Count > 0)
            {
                var p = q.Dequeue();
                //if (p.r == maxStep && p.c == maxStep)
                //{
                //    // cleaning visited.
                //    while (remove.Peek().step <= p.step - 5)
                //    {
                //        var rem = remove.Dequeue();
                //        visited.Remove((rem.r, rem.c));
                //    }
                //    if (q.Count > 0)
                //    {
                //        q.Enqueue((p.r, p.c, p.step + 1));
                //    }
                //    continue;
                //}
                for (int i = 0; i < 4; i++)
                {
                    int dr = p.r + dx[i], dc = p.c + dx[i + 1], step = p.step + 1;
                    if (visited.Contains((dr, dc))) continue;
                    if (grid[(dr % m + m) % m][(dc % n + n) % n] == '#') continue;
                    visited.Add((dr, dc));
                    if (step < maxStep)
                    {
                        q.Enqueue((dr, dc, step));
                        //remove.Enqueue((dr, dc, step));
                    }
                    if (maxStep % 2 == 0)
                    {// only sum those accessible in even steps !
                        if (step % 2 == 0)
                            ++count;
                    }
                    else if (step != maxStep - 1)
                        count++;
                }
            }

            Console.WriteLine($"2nd star is {count} for {maxStep}");
        }
    }
}